1. Add Dependancy 
     implementation 'com.theartofdev.edmodo:android-image-cropper:2.2.+'
     
     




2.   Menifest file
	// App Activity
	<activity
            android:name=".activity.ImageCroperMainActivity"
            android:screenOrientation="portrait"
            android:windowSoftInputMode="stateHidden" />
	 
	// Image croping SDk Activity 
        <activity
            android:name="com.theartofdev.edmodo.cropper.CropImageActivity"
            android:screenOrientation="portrait"
            android:theme="@style/CropTheme" />





3. style and them for croping Activity
	<style name="CropTheme" parent="@style/Theme.AppCompat">
		<item name="colorPrimary">@color/primaryColorOfTheme</item>
		<item name="titleTextColor">@color/primaryColorOfTheme</item>
		<item name="actionMenuTextColor">@color/white</item>
		<item name="android:textColorPrimary">@color/white</item>
   	 </style>
	 
	 
	 
	 

4.Activity

	import android.app.Activity;
	import android.content.ContentValues;
	import android.content.Context;
	import android.content.Intent;
	import android.database.Cursor;
	import android.graphics.Bitmap;
	import android.net.Uri;
	import android.os.Bundle;
	import android.provider.MediaStore;
	import android.support.v7.app.AppCompatActivity;
	import android.view.View;
	import android.widget.ImageView;
	import android.widget.Toast;

	import com.bookingcabspartner.app.R;
	import com.bookingcabspartner.app.utility.Util;
	import com.bumptech.glide.Glide;
	import com.theartofdev.edmodo.cropper.CropImage;
	import com.theartofdev.edmodo.cropper.CropImageView;


	public class ImageCroperMainActivity extends AppCompatActivity {


	    @Override
	    protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.image_croper_activity_main);
		imageView = findViewById(R.id.quick_start_cropped_image);
		application = (AppController) getApplication();
	    }

	    /**
	     * Start pick image activity with chooser.
	     */
	    public void onSelectImageClick(View view) {
		openForGallery();
	       // openForCamera();
	    }



	    private AppController application;
	    ImageView imageView;
	    private static final int PICK_FROM_CAMERA = 11;
	    private static final int PICK_FROM_FILE = 102;
	    private boolean fromCamera;


	    private void openForGallery() {
		try {
		    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
		    startActivityForResult(intent, PICK_FROM_FILE);
		}catch (Exception e){
		    e.printStackTrace();
		}
	    }

	    private void openForCamera() {
		try {
		    String fileName = "group_img.png";
		    ContentValues values = new ContentValues();
		    values.put(MediaStore.Images.Media.TITLE,fileName);
		    values.put(MediaStore.Images.Media.DESCRIPTION,"Image capture by camera");
		    imageUri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
		    Intent intent = new Intent( MediaStore.ACTION_IMAGE_CAPTURE);
		    intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
		    intent.putExtra( MediaStore.EXTRA_VIDEO_QUALITY, 1);
		    startActivityForResult(intent,PICK_FROM_CAMERA);
		} catch (SecurityException Exception) {
		    Exception.printStackTrace();
		   // getCameraPermission();
		} catch (Exception e) {
		    e.printStackTrace();
		}

	    }

	    private void startCropScreen(Uri imageUri) {
		CropImage.activity(imageUri).setGuidelines(CropImageView.Guidelines.ON).setAllowRotation(false).start(this);
	    }


	    @Override
	    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == PICK_FROM_CAMERA) {
		    fromCamera = true;
		    if (resultCode == RESULT_OK) {
			if (null != imageUri) {
			    startCropScreen(imageUri);
			} else {
			    Toast.makeText(getApplicationContext(), "hahahhaha", Toast.LENGTH_SHORT).show();
			}
		    }
		} else if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
		    if (resultCode == RESULT_OK) {
			CropImage.ActivityResult result = CropImage.getActivityResult(data);
			convertImageUriToFile(result.getUri(), ImageCroperMainActivity.this);
			Bitmap bitmap = Util.decodeFile(application.getGroupSelectedPath());
			imageView.setImageBitmap(bitmap);
			imageView.setImageURI(Util.getImageUri(bitmap, ImageCroperMainActivity.this));
			setImagetoView(Util.getImageUri(bitmap, ImageCroperMainActivity.this).toString(), ImageCroperMainActivity.this);

		    }
		} else {
		    if (resultCode == RESULT_OK) {
			fromCamera = false;
			imageUri = data.getData();
			startCropScreen(imageUri);
		    }
		}
	    }

	    private void setImagetoView(String imagePath, Context ctx) {
		Glide.with(ctx).load(imagePath).placeholder(R.drawable.user).error(R.drawable.user) .into(imageView);
	    }


	    Uri imageUri = null;
	    private Cursor cursor = null;
	    public String convertImageUriToFile(Uri imageUri, Activity activity) {
		int imageID = 0;
		try {
		    application.setGroupSelectedPath(imageUri.getPath());
		} finally {
		    if (cursor != null) {
			cursor.close();
		    }
		    cursor = null;
		}
		return "" + imageID;
	    }



	}
	




5. AppController / Application Calss

	import android.app.Application;
	import android.text.TextUtils;
	import com.android.volley.DefaultRetryPolicy;
	import com.android.volley.Request;
	import com.android.volley.RequestQueue;
	import com.android.volley.RetryPolicy;
	import com.android.volley.toolbox.ImageLoader;
	import com.android.volley.toolbox.Volley;
	import com.bookingcabspartner.app.utility.LruBitmapCache;

	public class AppController extends Application {

    	 public static final String TAG = AppController.class.getSimpleName();
   	 private static AppController mInstance;
	 
	     public void onCreate() {
		super.onCreate();
		mInstance = this;

	    }


	    public String groupSelectedPath;
	    public String getGroupSelectedPath() {
		return groupSelectedPath;
	    }

	    public void setGroupSelectedPath(String groupSelectedPath) {
		this.groupSelectedPath = groupSelectedPath;
	    }


	    public static synchronized AppController getInstance() {
		return mInstance;
	    }
    
    }
	
	
	
	


6. XML / Layout Design

	<RelativeLayout
	    xmlns:android="http://schemas.android.com/apk/res/android"
	    android:layout_width="match_parent"
	    android:layout_height="match_parent"
	    android:orientation="vertical"
	    android:background="@android:color/black">

	    <android.support.design.widget.AppBarLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:id="@+id/rlll">

		<RelativeLayout
		    android:layout_width="match_parent"
		    android:layout_height="match_parent">
		    <include
			android:id="@+id/toolbarr"
			layout="@layout/toolbar" />
		</RelativeLayout>
	    </android.support.design.widget.AppBarLayout>


	    <Button
		android:id="@+id/onSelectImageClick"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:layout_marginTop="12dp"
		android:layout_marginBottom="12dp"
		android:onClick="onSelectImageClick"
		android:text="Start Activity"
		android:layout_below="@+id/rlll"/>

	    <ImageView
		android:id="@+id/quick_start_cropped_image"
		android:layout_width="match_parent"
		android:layout_height="200dp"
		android:layout_centerInParent="true"
		android:padding="20dp"
		android:scaleType="centerCrop"/>

	</RelativeLayout>
